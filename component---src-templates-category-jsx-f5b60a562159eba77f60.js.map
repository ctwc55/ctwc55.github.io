{"version":3,"file":"component---src-templates-category-jsx-f5b60a562159eba77f60.js","mappings":"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","sources":["webpack://headless-gatsby-multilang/./src/components/Layout/Blog/CategoriesMenu.jsx","webpack://headless-gatsby-multilang/./src/components/Layout/Hero/index.jsx","webpack://headless-gatsby-multilang/./src/templates/Category.jsx"],"sourcesContent":["import React from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport styled, { css } from 'styled-components';\nimport { Navigator } from '../../LanguageHelpers/Navigator';\nimport { useTextDirection } from '../../../hooks/useTextDirection';\nimport { usePageLanguage } from '../../../hooks/usePageLanguage';\n\n// Scoped styles\n\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0 var(--globalPaddingLr);\n`;\n\nconst divider = 'var(--borderSmall) solid var(--dividerColor);';\n\nconst ScrollGradientContainer = styled.div`\n  --scrollBarHeight: 6px;\n  position: relative;\n  width: var(--globalContainer);\n  padding-bottom: var(--borderRegular);\n  border-top: ${divider};\n  border-bottom: ${divider};\n  width: 100%;\n  max-width: var(--globalContainer);\n\n  &::after {\n    position: absolute;\n    content: '';\n    width: var(--gapXL);\n    z-index: 2;\n    display: block;\n    height: calc(100% - calc(var(--scrollBarHeight) * 2));\n    top: 0;\n    ${({ isRtl }) =>\n      isRtl\n        ? css`\n            left: 0;\n            background: linear-gradient(\n              to left,\n              var(--backgroundTransparentColor) 25%,\n              var(--backgroundColor) 75%\n            );\n          `\n        : css`\n            right: 0;\n            background: linear-gradient(\n              to right,\n              var(--backgroundTransparentColor) 25%,\n              var(--backgroundColor) 75%\n            );\n          `}\n  }\n`;\n\nconst GradientOverlay = styled.span``;\n\nconst NavContainer = styled.nav`\n  width: var(--globalContainer);\n  padding: var(--gapRegular) 0\n    calc(var(--gapRegular) - calc(var(--scrollBarHeight) / 2)) 0;\n  overflow: auto;\n  scrollbar-width: thin;\n  scrollbar-color: var(--dividerColor) var(--transparent);\n  width: 100%;\n  max-width: var(--globalContainer);\n\n  &::-webkit-scrollbar {\n    height: var(--scrollBarHeight);\n  }\n\n  &::-webkit-scrollbar-track {\n    background: var(--backgroundColorAlt);\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background-color: var(--dividerColor);\n    border-radius: var(--scrollBarHeight);\n    border: none;\n  }\n`;\n\nconst NavList = styled.ul`\n  display: grid;\n  grid-auto-flow: column;\n  width: min-content;\n  column-gap: var(--gapXL);\n\n  & li:last-of-type > a {\n    z-index: 3;\n  }\n`;\n\nconst CategoryLink = styled(Navigator)`\n  color: var(--headingsColor);\n  font-weight: 600;\n  white-space: nowrap;\n  position: relative;\n\n  @media (hover: hover) {\n    &:hover {\n      color: var(--primaryColor);\n    }\n  }\n`;\n\n// Main component\n\nexport const CategoriesMenu = () => {\n  const data = useStaticQuery(graphql`\n    {\n      allDatoCmsCategory(filter: { noTranslate: { ne: true } }) {\n        categoryNodes: nodes {\n          id: originalId\n          locale\n          title\n        }\n      }\n    }\n  `);\n\n  const {\n    allDatoCmsCategory: { categoryNodes },\n  } = data;\n\n  const { pageLanguage } = usePageLanguage();\n  const { isRtl } = useTextDirection();\n\n  return (\n    <Wrapper>\n      <ScrollGradientContainer isRtl={isRtl}>\n        <GradientOverlay />\n        <NavContainer>\n          <NavList>\n            {categoryNodes\n              .filter(({ locale }) => locale === pageLanguage)\n              .map(({ id, title }) => (\n                <li key={title}>\n                  <CategoryLink recordId={id} activeClassName=\"activeClassLink\">\n                    {title}\n                  </CategoryLink>\n                </li>\n              ))}\n          </NavList>\n        </NavContainer>\n      </ScrollGradientContainer>\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { HeroSubtitle, HeroTitle, HeroAlt } from '../SharedStyles/Headings';\nimport { Divider } from '../SharedStyles/Sections';\n\nconst HeroWrapper = styled.section`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: ${({ fullView }) => fullView && '100vh'};\n  padding: var(--globalPaddingTb) var(--globalPaddingLr);\n  flex-direction: column;\n  position: relative;\n`;\n\nconst HeroContainer = styled.div`\n  width: var(--globalContainer);\n  display: grid;\n  row-gap: var(--gapXL);\n  justify-content: ${({ centered }) => centered && 'center'};\n  width: 100%;\n  max-width: var(--globalContainer);\n`;\n\nconst HeroTextBox = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  row-gap: var(--gapRegular);\n  width: 600px;\n  justify-items: ${({ centered }) => centered && 'center'};\n  @media screen and (max-width: 767px) {\n    width: 100%;\n  }\n`;\n\nexport const Hero = ({\n  fullView,\n  centered,\n  alt,\n  title,\n  subtitle,\n  button,\n  sectionChildren,\n  hasDivider,\n}) => (\n  <HeroWrapper fullView={fullView}>\n    <HeroContainer centered={centered}>\n      <HeroTextBox centered={centered}>\n        {alt && <HeroAlt>{alt}</HeroAlt>}\n        <HeroTitle centered={centered}>{title}</HeroTitle>\n        <HeroSubtitle centered={centered}>{subtitle}</HeroSubtitle>\n        {button}\n      </HeroTextBox>\n      {sectionChildren}\n    </HeroContainer>\n    {hasDivider && <Divider bottom />}\n  </HeroWrapper>\n);\n","import { graphql } from 'gatsby';\nimport React from 'react';\nimport { Hero } from '../components/Layout/Hero';\nimport { PageWrapper } from '../components/Layout/PageWrapper';\nimport { CategoriesMenu } from '../components/Layout/Blog/CategoriesMenu';\nimport {\n  SectionContainerGridThreeCols,\n  SectionWrapper,\n} from '../components/Layout/SharedStyles/Sections';\nimport { ArticleCard, CardImgArtDir } from '../components/Layout/Blog/Cards';\n\nconst CategoryTemplate = ({\n  data: {\n    datoCmsCategory: {\n      hero: [{ heroTitle, heroSubtitle, heroAlt }],\n      seo,\n    },\n    allCategoryPosts: { postNodes },\n  },\n  pageContext,\n}) => (\n  <PageWrapper\n    pageData={pageContext}\n    seoTitle={seo?.seoTitle}\n    seoDescription={seo?.seoDescription}\n    seoImage={seo?.seoImage?.seoImageUrl}\n  >\n    <Hero alt={heroAlt} title={heroTitle} subtitle={heroSubtitle} />\n    <CategoriesMenu />\n    {postNodes.length > 0 && (\n      <SectionWrapper>\n        <SectionContainerGridThreeCols>\n          {postNodes.map(\n            ({\n              id,\n              meta: { updatedAt },\n              title,\n              coverImage,\n              subtitle,\n              author: {\n                authorName,\n                picture: { authorImageData },\n              },\n              categoryLink,\n            }) => (\n              <ArticleCard\n                key={id}\n                recordId={id}\n                date={updatedAt}\n                category={categoryLink}\n                cardImg={\n                  coverImage &&\n                  CardImgArtDir(\n                    coverImage.gatsbyImageData,\n                    coverImage.squaredImage,\n                    title\n                  )\n                }\n                title={title}\n                excerpt={subtitle}\n                authorImg={authorImageData}\n                authorAltImg={authorName}\n                authorName={authorName}\n              />\n            )\n          )}\n        </SectionContainerGridThreeCols>\n      </SectionWrapper>\n    )}\n  </PageWrapper>\n);\n\nexport default CategoryTemplate;\n\nexport const query = graphql`\n  query CategoryQuery($id: String!, $locale: String!) {\n    datoCmsCategory(originalId: { eq: $id }, locale: { eq: $locale }) {\n      locale\n      seo {\n        seoTitle: title\n        seoDescription: description\n        seoImage: image {\n          seoImageUrl: url\n        }\n      }\n      hero {\n        heroTitle\n        heroSubtitle\n        heroAlt\n      }\n    }\n    allCategoryPosts: allDatoCmsBlogPost(\n      filter: {\n        locale: { eq: $locale }\n        noTranslate: { ne: true }\n        categoryLink: { originalId: { eq: $id } }\n      }\n      sort: { order: ASC, fields: meta___updatedAt }\n    ) {\n      postNodes: nodes {\n        locale\n        id: originalId\n        meta {\n          updatedAt\n        }\n        categoryLink {\n          originalId\n          title\n        }\n        coverImage {\n          gatsbyImageData(\n            width: 300\n            height: 120\n            placeholder: NONE\n            forceBlurhash: false\n          )\n          squaredImage: gatsbyImageData(\n            width: 100\n            height: 100\n            imgixParams: { ar: \"1\", fit: \"crop\" }\n          )\n        }\n        author {\n          authorName: name\n          picture {\n            authorImageData: gatsbyImageData(\n              height: 30\n              width: 30\n              placeholder: NONE\n            )\n          }\n        }\n        subtitle\n        title\n      }\n    }\n  }\n`;\n"],"names":["Wrapper","styled","div","withConfig","componentId","divider","ScrollGradientContainer","_ref","isRtl","css","GradientOverlay","span","NavContainer","nav","NavList","ul","CategoryLink","Navigator","CategoriesMenu","categoryNodes","useStaticQuery","allDatoCmsCategory","pageLanguage","usePageLanguage","useTextDirection","React","filter","_ref2","locale","map","_ref3","id","title","key","recordId","activeClassName","HeroWrapper","section","fullView","HeroContainer","centered","HeroTextBox","Hero","_ref4","alt","subtitle","button","sectionChildren","hasDivider","HeroAlt","HeroTitle","HeroSubtitle","Divider","bottom","_seo$seoImage","_ref$data","data","_ref$data$datoCmsCate","datoCmsCategory","_ref$data$datoCmsCate3","hero","heroTitle","heroSubtitle","heroAlt","seo","postNodes","allCategoryPosts","pageContext","PageWrapper","pageData","seoTitle","seoDescription","seoImage","seoImageUrl","length","SectionWrapper","SectionContainerGridThreeCols","updatedAt","meta","coverImage","_ref2$author","author","authorName","authorImageData","picture","categoryLink","ArticleCard","date","category","cardImg","CardImgArtDir","gatsbyImageData","squaredImage","excerpt","authorImg","authorAltImg"],"sourceRoot":""}