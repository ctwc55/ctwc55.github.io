{"version":3,"file":"component---src-templates-blog-root-jsx-3a73f394ae056e6ead6e.js","mappings":"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","sources":["webpack://headless-gatsby-multilang/./src/components/Layout/Blog/Cards.jsx","webpack://headless-gatsby-multilang/./src/components/Layout/Blog/CategoriesMenu.jsx","webpack://headless-gatsby-multilang/./src/components/Layout/Hero/index.jsx","webpack://headless-gatsby-multilang/./src/functions/formatDateTime.js","webpack://headless-gatsby-multilang/./src/templates/BlogRoot.jsx"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { GatsbyImage, getImage, withArtDirection } from 'gatsby-plugin-image';\r\nimport { Navigator } from '../../LanguageHelpers/Navigator';\r\nimport { HeadingSmall } from '../SharedStyles/Headings';\r\nimport { usePageLanguage } from '../../../hooks/usePageLanguage';\r\nimport { formatDate } from '../../../functions/formatDateTime';\r\nimport { easeOutTiming } from '../SharedStyles/animations';\r\n\r\n// Scoped styles\r\n\r\nconst CardLink = styled(Navigator)`\r\n  width: 100%;\r\n  row-gap: var(--gapSmall);\r\n  display: grid;\r\n  height: min-content;\r\n  justify-content: start;\r\n\r\n  @media screen and (max-width: 950px) {\r\n    grid-template-columns: repeat(3, 1fr);\r\n    column-gap: var(--gapRegular);\r\n    align-items: initial;\r\n    min-height: 120px;\r\n  }\r\n\r\n  @media (hover: hover) {\r\n    &:hover {\r\n      & h1 {\r\n        color: var(--primaryColor);\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst CardImgContainer = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst CardImg = styled(GatsbyImage)`\r\n  border-radius: var(--defaultRadius);\r\n  z-index: 2;\r\n\r\n  @media screen and (max-width: 950px) {\r\n    --widthMobile: 50px;\r\n    min-width: var(--widthMobile);\r\n    min-height: var(--widthMobile);\r\n  }\r\n\r\n  & picture {\r\n    & img {\r\n      border-radius: var(--defaultRadius);\r\n      @media screen and (max-width: 950px) {\r\n        height: unset !important;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst CategoryBox = styled.span`\r\n  width: max-content;\r\n  white-space: nowrap;\r\n  line-height: 0.8;\r\n  position: relative;\r\n  padding: 0.3em 0.5em 0.4em 0.5em;\r\n  margin-bottom: -5px;\r\n  border: var(--borderSmall) solid var(--primaryColor);\r\n  color: var(--primaryColor);\r\n  border-radius: 5px;\r\n  font-size: var(--baseS);\r\n  font-weight: 600;\r\n\r\n  @media screen and (max-width: 950px) {\r\n    margin-bottom: 0;\r\n  }\r\n`;\r\n\r\nexport const CardImgArtDir = (cardImg, cardImgMobile, altImg) => {\r\n  const cardImgs = withArtDirection(getImage(cardImg), [\r\n    {\r\n      media: '(max-width: 950px)',\r\n      image: getImage(cardImgMobile),\r\n    },\r\n  ]);\r\n  return (\r\n    <CardImgContainer>\r\n      <CardImg objectFit=\"cover\" image={cardImgs} alt={altImg || ''} />\r\n    </CardImgContainer>\r\n  );\r\n};\r\n\r\nconst ContentWrapper = styled.div`\r\n  row-gap: var(--gapSmall);\r\n  display: grid;\r\n  height: max-content;\r\n\r\n  @media screen and (max-width: 950px) {\r\n    row-gap: calc(var(--gapSmall) / 1.5);\r\n    grid-column: 2 / span 2;\r\n  }\r\n`;\r\n\r\nconst PostTitle = styled(HeadingSmall)`\r\n  &&& {\r\n    margin-top: ${({ isCategoryTitle }) =>\r\n      isCategoryTitle ? '0.25em' : '-0.25em'};\r\n    line-height: 1.1;\r\n  }\r\n  transition: color ${easeOutTiming};\r\n  margin: calc(var(--gapSmall) - 0.66em) 0;\r\n\r\n  @media screen and (max-width: 950px) {\r\n    margin: unset;\r\n  }\r\n\r\n  @media screen and (max-width: 768px) {\r\n    font-size: var(--baseMMobile);\r\n  }\r\n`;\r\n\r\nconst Date = styled.time`\r\n  color: var(--baseTextColor);\r\n  font-size: var(--baseS);\r\n  text-transform: capitalize;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    font-size: var(--baseSMobile);\r\n  }\r\n`;\r\n\r\nconst Excerpt = styled.p`\r\n  color: var(--baseTextColor);\r\n  font-size: var(--baseM);\r\n  line-height: 1.3;\r\n`;\r\n\r\nconst AuthorCtaContainer = styled.footer`\r\n  display: flex;\r\n  grid-template-columns: auto auto;\r\n  column-gap: var(--gapRegular);\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst AuthorContainer = styled.div`\r\n  --imgWidthHeight: 25px;\r\n  display: grid;\r\n  grid-template-columns: var(--imgWidthHeight) auto;\r\n  column-gap: var(--gapSmall);\r\n  align-items: center;\r\n\r\n  @media screen and (max-width: 950px) {\r\n    --imgWidthHeight: 20px;\r\n    column-gap: calc(var(--gapSmall) - 0.33em);\r\n    grid-template-columns: var(--imgWidthHeight) auto;\r\n  }\r\n`;\r\n\r\nconst AuthorImg = styled(GatsbyImage)`\r\n  width: var(--imgWidthHeight);\r\n  height: var(--imgWidthHeight);\r\n\r\n  & img {\r\n    border-radius: var(--imgWidthHeight);\r\n  }\r\n`;\r\n\r\n// Main components\r\n\r\nexport const ArticleCard = ({\r\n  recordId,\r\n  cardImg,\r\n  date,\r\n  title,\r\n  excerpt,\r\n  authorImg,\r\n  authorName,\r\n  category,\r\n}) => {\r\n  const { pageLanguage } = usePageLanguage();\r\n  return (\r\n    <article>\r\n      <CardLink recordId={recordId}>\r\n        {cardImg}\r\n        <ContentWrapper>\r\n          {category && <CategoryBox>{category.title}</CategoryBox>}\r\n          <Date>{formatDate(date, pageLanguage)}</Date>\r\n          <PostTitle>{title}</PostTitle>\r\n          <Excerpt>{excerpt}</Excerpt>\r\n          <AuthorCtaContainer>\r\n            <AuthorContainer>\r\n              <AuthorImg\r\n                objectFit=\"cover\"\r\n                image={authorImg || ''}\r\n                alt={authorName || ''}\r\n              />\r\n              <Date as=\"address\">{authorName}</Date>\r\n            </AuthorContainer>\r\n          </AuthorCtaContainer>\r\n        </ContentWrapper>\r\n      </CardLink>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport const CategoryCard = ({ recordId, cardImg, title, description }) => (\r\n  <article>\r\n    <CardLink recordId={recordId}>\r\n      {cardImg}\r\n      <ContentWrapper>\r\n        <PostTitle isCategoryTitle>{title}</PostTitle>\r\n        <Excerpt>{description}</Excerpt>\r\n      </ContentWrapper>\r\n    </CardLink>\r\n  </article>\r\n);\r\n","import React from 'react';\r\nimport { graphql, useStaticQuery } from 'gatsby';\r\nimport styled, { css } from 'styled-components';\r\nimport { Navigator } from '../../LanguageHelpers/Navigator';\r\nimport { useTextDirection } from '../../../hooks/useTextDirection';\r\nimport { usePageLanguage } from '../../../hooks/usePageLanguage';\r\n\r\n// Scoped styles\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 0 var(--globalPaddingLr);\r\n`;\r\n\r\nconst divider = 'var(--borderSmall) solid var(--dividerColor);';\r\n\r\nconst ScrollGradientContainer = styled.div`\r\n  --scrollBarHeight: 6px;\r\n  position: relative;\r\n  width: var(--globalContainer);\r\n  padding-bottom: var(--borderRegular);\r\n  border-top: ${divider};\r\n  border-bottom: ${divider};\r\n  width: 100%;\r\n  max-width: var(--globalContainer);\r\n\r\n  &::after {\r\n    position: absolute;\r\n    content: '';\r\n    width: var(--gapXL);\r\n    z-index: 2;\r\n    display: block;\r\n    height: calc(100% - calc(var(--scrollBarHeight) * 2));\r\n    top: 0;\r\n    ${({ isRtl }) =>\r\n      isRtl\r\n        ? css`\r\n            left: 0;\r\n            background: linear-gradient(\r\n              to left,\r\n              var(--backgroundTransparentColor) 25%,\r\n              var(--backgroundColor) 75%\r\n            );\r\n          `\r\n        : css`\r\n            right: 0;\r\n            background: linear-gradient(\r\n              to right,\r\n              var(--backgroundTransparentColor) 25%,\r\n              var(--backgroundColor) 75%\r\n            );\r\n          `}\r\n  }\r\n`;\r\n\r\nconst GradientOverlay = styled.span``;\r\n\r\nconst NavContainer = styled.nav`\r\n  width: var(--globalContainer);\r\n  padding: var(--gapRegular) 0\r\n    calc(var(--gapRegular) - calc(var(--scrollBarHeight) / 2)) 0;\r\n  overflow: auto;\r\n  scrollbar-width: thin;\r\n  scrollbar-color: var(--dividerColor) var(--transparent);\r\n  width: 100%;\r\n  max-width: var(--globalContainer);\r\n\r\n  &::-webkit-scrollbar {\r\n    height: var(--scrollBarHeight);\r\n  }\r\n\r\n  &::-webkit-scrollbar-track {\r\n    background: var(--backgroundColorAlt);\r\n  }\r\n\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: var(--dividerColor);\r\n    border-radius: var(--scrollBarHeight);\r\n    border: none;\r\n  }\r\n`;\r\n\r\nconst NavList = styled.ul`\r\n  display: grid;\r\n  grid-auto-flow: column;\r\n  width: min-content;\r\n  column-gap: var(--gapXL);\r\n\r\n  & li:last-of-type > a {\r\n    z-index: 3;\r\n  }\r\n`;\r\n\r\nconst CategoryLink = styled(Navigator)`\r\n  color: var(--headingsColor);\r\n  font-weight: 600;\r\n  white-space: nowrap;\r\n  position: relative;\r\n\r\n  @media (hover: hover) {\r\n    &:hover {\r\n      color: var(--primaryColor);\r\n    }\r\n  }\r\n`;\r\n\r\n// Main component\r\n\r\nexport const CategoriesMenu = () => {\r\n  const data = useStaticQuery(graphql`\r\n    {\r\n      allDatoCmsCategory(filter: { noTranslate: { ne: true } }) {\r\n        categoryNodes: nodes {\r\n          id: originalId\r\n          locale\r\n          title\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const {\r\n    allDatoCmsCategory: { categoryNodes },\r\n  } = data;\r\n\r\n  const { pageLanguage } = usePageLanguage();\r\n  const { isRtl } = useTextDirection();\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ScrollGradientContainer isRtl={isRtl}>\r\n        <GradientOverlay />\r\n        <NavContainer>\r\n          <NavList>\r\n            {categoryNodes\r\n              .filter(({ locale }) => locale === pageLanguage)\r\n              .map(({ id, title }) => (\r\n                <li key={title}>\r\n                  <CategoryLink recordId={id} activeClassName=\"activeClassLink\">\r\n                    {title}\r\n                  </CategoryLink>\r\n                </li>\r\n              ))}\r\n          </NavList>\r\n        </NavContainer>\r\n      </ScrollGradientContainer>\r\n    </Wrapper>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { HeroSubtitle, HeroTitle, HeroAlt } from '../SharedStyles/Headings';\r\nimport { Divider } from '../SharedStyles/Sections';\r\n\r\nconst HeroWrapper = styled.section`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: ${({ fullView }) => fullView && '100vh'};\r\n  padding: var(--globalPaddingTb) var(--globalPaddingLr);\r\n  flex-direction: column;\r\n  position: relative;\r\n`;\r\n\r\nconst HeroContainer = styled.div`\r\n  width: var(--globalContainer);\r\n  display: grid;\r\n  row-gap: var(--gapXL);\r\n  justify-content: ${({ centered }) => centered && 'center'};\r\n  width: 100%;\r\n  max-width: var(--globalContainer);\r\n`;\r\n\r\nconst HeroTextBox = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  row-gap: var(--gapRegular);\r\n  width: 600px;\r\n  justify-items: ${({ centered }) => centered && 'center'};\r\n  @media screen and (max-width: 767px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const Hero = ({\r\n  fullView,\r\n  centered,\r\n  alt,\r\n  title,\r\n  subtitle,\r\n  button,\r\n  sectionChildren,\r\n  hasDivider,\r\n}) => (\r\n  <HeroWrapper fullView={fullView}>\r\n    <HeroContainer centered={centered}>\r\n      <HeroTextBox centered={centered}>\r\n        {alt && <HeroAlt>{alt}</HeroAlt>}\r\n        <HeroTitle centered={centered}>{title}</HeroTitle>\r\n        <HeroSubtitle centered={centered}>{subtitle}</HeroSubtitle>\r\n        {button}\r\n      </HeroTextBox>\r\n      {sectionChildren}\r\n    </HeroContainer>\r\n    {hasDivider && <Divider bottom />}\r\n  </HeroWrapper>\r\n);\r\n","const timeOptions = {\r\n  hour: '2-digit',\r\n  minute: '2-digit',\r\n};\r\n\r\nconst dateOptions = {\r\n  year: 'numeric',\r\n  month: 'short',\r\n  day: 'numeric',\r\n};\r\n\r\nexport const formatDateTime = (dateString, contextLocale) =>\r\n  new Date(dateString).toLocaleString(contextLocale, {\r\n    ...dateOptions,\r\n    ...timeOptions,\r\n  });\r\n\r\nexport const formatDate = (dateString, contextLocale) =>\r\n  new Date(dateString).toLocaleString(contextLocale, {\r\n    ...dateOptions,\r\n  });\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport { PageWrapper } from '../components/Layout/PageWrapper';\r\nimport { Hero } from '../components/Layout/Hero';\r\nimport {\r\n  SectionContainerGridThreeCols,\r\n  SectionWrapper,\r\n} from '../components/Layout/SharedStyles/Sections';\r\nimport { ArticleCard, CardImgArtDir } from '../components/Layout/Blog/Cards';\r\nimport { CategoriesMenu } from '../components/Layout/Blog/CategoriesMenu';\r\n\r\nconst BlogRootTemplate = ({\r\n  data: {\r\n    datoCmsBlogRoot: {\r\n      hero: [{ heroTitle, heroSubtitle }],\r\n      seo,\r\n    },\r\n    allDatoCmsBlogPost: { blogPostNodes },\r\n  },\r\n  pageContext,\r\n}) => (\r\n  <PageWrapper\r\n    pageData={pageContext}\r\n    seoTitle={seo?.seoTitle}\r\n    seoDescription={seo?.seoDescription}\r\n    seoImage={seo?.seoImage?.seoImageUrl}\r\n    seo\r\n  >\r\n    <Hero title={heroTitle} subtitle={heroSubtitle} />\r\n    <CategoriesMenu />\r\n    <SectionWrapper>\r\n      <SectionContainerGridThreeCols>\r\n        {blogPostNodes.map(\r\n          ({\r\n            id,\r\n            meta: { updatedAt },\r\n            coverImage,\r\n            title,\r\n            subtitle,\r\n            author,\r\n            categoryLink,\r\n          }) => (\r\n            <ArticleCard\r\n              key={id}\r\n              recordId={id}\r\n              date={updatedAt}\r\n              category={categoryLink}\r\n              cardImg={\r\n                coverImage &&\r\n                CardImgArtDir(\r\n                  coverImage.gatsbyImageData,\r\n                  coverImage.squaredImage,\r\n                  title\r\n                )\r\n              }\r\n              title={title}\r\n              excerpt={subtitle}\r\n              authorImg={author?.picture.gatsbyImageData}\r\n              authorAltImg={author?.authorName}\r\n              authorName={author?.authorName}\r\n            />\r\n          )\r\n        )}\r\n      </SectionContainerGridThreeCols>\r\n    </SectionWrapper>\r\n  </PageWrapper>\r\n);\r\n\r\nexport default BlogRootTemplate;\r\n\r\n// Main query\r\n\r\nexport const query = graphql`\r\n  query BlogRootQuery($locale: String!) {\r\n    allDatoCmsBlogPost(\r\n      filter: {\r\n        locale: { eq: $locale }\r\n        noTranslate: { ne: true }\r\n        categoryLink: { noTranslate: { ne: true } }\r\n      }\r\n      sort: { order: ASC, fields: meta___updatedAt }\r\n    ) {\r\n      blogPostNodes: nodes {\r\n        locale\r\n        id: originalId\r\n        title\r\n        subtitle\r\n        noTranslate\r\n        meta {\r\n          updatedAt\r\n        }\r\n        categoryLink {\r\n          noTranslate\r\n          title\r\n        }\r\n        coverImage {\r\n          gatsbyImageData(\r\n            width: 300\r\n            height: 120\r\n            placeholder: NONE\r\n            forceBlurhash: false\r\n          )\r\n          squaredImage: gatsbyImageData(\r\n            width: 100\r\n            height: 100\r\n            imgixParams: { ar: \"1\", fit: \"crop\" }\r\n          )\r\n        }\r\n        author {\r\n          authorName: name\r\n          picture {\r\n            gatsbyImageData(height: 30, width: 30, placeholder: NONE)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    datoCmsBlogRoot(locale: { eq: $locale }) {\r\n      locale\r\n      seo {\r\n        seoTitle: title\r\n        seoDescription: description\r\n        seoImage: image {\r\n          seoImageUrl: url\r\n        }\r\n      }\r\n      hero {\r\n        heroTitle\r\n        heroSubtitle\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["CardLink","styled","Navigator","CardImgContainer","CardImg","GatsbyImage","CategoryBox","CardImgArtDir","cardImg","cardImgMobile","altImg","cardImgs","withArtDirection","getImage","media","image","objectFit","alt","ContentWrapper","PostTitle","HeadingSmall","isCategoryTitle","easeOutTiming","Date","Excerpt","AuthorCtaContainer","AuthorContainer","AuthorImg","ArticleCard","recordId","date","title","excerpt","authorImg","authorName","category","pageLanguage","usePageLanguage","formatDate","as","CategoryCard","description","Wrapper","divider","ScrollGradientContainer","isRtl","css","GradientOverlay","NavContainer","NavList","CategoryLink","CategoriesMenu","categoryNodes","useStaticQuery","allDatoCmsCategory","useTextDirection","filter","locale","map","id","key","activeClassName","HeroWrapper","fullView","HeroContainer","centered","HeroTextBox","Hero","subtitle","button","sectionChildren","hasDivider","bottom","timeOptions","hour","minute","dateOptions","year","month","day","formatDateTime","dateString","contextLocale","toLocaleString","data","datoCmsBlogRoot","hero","heroTitle","heroSubtitle","seo","blogPostNodes","allDatoCmsBlogPost","pageContext","pageData","seoTitle","seoDescription","seoImage","seoImageUrl","updatedAt","meta","coverImage","author","categoryLink","gatsbyImageData","squaredImage","picture","authorAltImg"],"sourceRoot":""}