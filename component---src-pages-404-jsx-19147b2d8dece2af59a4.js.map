{"version":3,"file":"component---src-pages-404-jsx-19147b2d8dece2af59a4.js","mappings":"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","sources":["webpack://headless-gatsby-multilang/./src/components/Layout/Hero/index.jsx","webpack://headless-gatsby-multilang/./src/components/Head/NotFoundPageHead.jsx","webpack://headless-gatsby-multilang/./src/pages/404.jsx"],"sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { HeroSubtitle, HeroTitle, HeroAlt } from '../SharedStyles/Headings';\r\nimport { Divider } from '../SharedStyles/Sections';\r\n\r\nconst HeroWrapper = styled.section`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: ${({ fullView }) => fullView && '100vh'};\r\n  padding: var(--globalPaddingTb) var(--globalPaddingLr);\r\n  flex-direction: column;\r\n  position: relative;\r\n  white-space: pre-wrap;\r\n`;\r\n\r\nconst HeroContainer = styled.div`\r\n  width: var(--globalContainer);\r\n  display: grid;\r\n  row-gap: var(--gapXL);\r\n  justify-content: ${({ centered }) => centered && 'center'};\r\n  width: 100%;\r\n  max-width: var(--globalContainer);\r\n  white-space: pre-wrap;\r\n`;\r\n\r\nconst HeroTextBox = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  row-gap: var(--gapRegular);\r\n  width: 600px;\r\n  justify-items: ${({ centered }) => centered && 'center'};\r\n  @media screen and (max-width: 767px) {\r\n    width: 100%;\r\n  }\r\n  white-space: pre-wrap;\r\n`;\r\n\r\nexport const Hero = ({\r\n  fullView,\r\n  centered,\r\n  alt,\r\n  title,\r\n  subtitle,\r\n  button,\r\n  sectionChildren,\r\n  hasDivider,\r\n}) => (\r\n  <HeroWrapper fullView={fullView}>\r\n    <HeroContainer centered={centered}>\r\n      <HeroTextBox centered={centered}>\r\n        {alt && <HeroAlt>{alt}</HeroAlt>}\r\n        <HeroTitle centered={centered}>{title}</HeroTitle>\r\n        <HeroSubtitle centered={centered}>{subtitle}</HeroSubtitle>\r\n        {button}\r\n      </HeroTextBox>\r\n      {sectionChildren}\r\n    </HeroContainer>\r\n    {hasDivider && <Divider bottom />}\r\n  </HeroWrapper>\r\n);\r\n","import React from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { isRtlLang } from '../../functions/langUtils';\r\n\r\nexport const NotFoundPageHead = ({ locale, title }) => {\r\n  const isRtl = isRtlLang(locale);\r\n\r\n  return (\r\n    <Helmet>\r\n      <html lang={locale} dir={isRtl ? 'rtl' : 'ltr'} />\r\n      <link rel=\"icon\" href=\"/favicon-32.png\" type=\"image/png\" />\r\n      <title>{title}</title>\r\n    </Helmet>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { graphql, Link, useStaticQuery } from 'gatsby';\r\nimport { useDefaultLanguage } from '../hooks/useDefaultLanguage';\r\nimport { Hero } from '../components/Layout/Hero';\r\nimport {\r\n  storeLocale,\r\n  getStoredLocale,\r\n  getSecondaryLangs,\r\n  findSecondaryLang,\r\n  isDefaultStored,\r\n  isSecondaryStored,\r\n} from '../functions/langUtils';\r\nimport { getPreferredLang } from '../functions/getPreferredLang';\r\nimport { isSSR } from '../functions/isSSR';\r\nimport { NotFoundPageHead } from '../components/Head/NotFoundPageHead';\r\n\r\nconst NotFoundPage = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      datoCmsSite {\r\n        locales\r\n      }\r\n      allDatoCmsNotFoundPage {\r\n        nodes {\r\n          seo {\r\n            seoTitle: title\r\n          }\r\n          title\r\n          subtitle\r\n          backToHomeText\r\n          locale\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const { defaultLanguage } = useDefaultLanguage();\r\n\r\n  const {\r\n    datoCmsSite: { locales },\r\n  } = data;\r\n  const appLangCodes = [...locales];\r\n  const storedLocale = getStoredLocale();\r\n\r\n  if (!isSSR) {\r\n    const browserLangCodes = navigator.languages;\r\n    const {\r\n      allDatoCmsNotFoundPage: { nodes: propNodes },\r\n    } = data;\r\n\r\n    const [defaultLangPropsNode] = propNodes;\r\n\r\n    const {\r\n      seo: { seoTitle },\r\n      title,\r\n      subtitle,\r\n      backToHomeText,\r\n    } = defaultLangPropsNode;\r\n\r\n    const defaultLangProps = {\r\n      headProps: {\r\n        title: seoTitle,\r\n        locale: defaultLanguage,\r\n      },\r\n      heroProps: {\r\n        title,\r\n        subtitle,\r\n      },\r\n      linkProps: {\r\n        children: backToHomeText,\r\n        to: '/',\r\n      },\r\n    };\r\n\r\n    const getProps = () => {\r\n      const isDefaultLangStored = isDefaultStored(\r\n        appLangCodes,\r\n        storedLocale,\r\n        defaultLanguage\r\n      );\r\n      if (isDefaultLangStored) return { ...defaultLangProps };\r\n\r\n      const isSecondaryLangStored = isSecondaryStored(\r\n        appLangCodes,\r\n        storedLocale,\r\n        defaultLanguage\r\n      );\r\n      if (isSecondaryLangStored) {\r\n        const storedLangProps = propNodes.find(\r\n          ({ locale }) => locale === storedLocale\r\n        );\r\n\r\n        return {\r\n          headProps: {\r\n            title: storedLangProps.seo.seoTitle,\r\n            locale: storedLocale,\r\n          },\r\n          heroProps: {\r\n            title: storedLangProps.title,\r\n            subtitle: storedLangProps.subtitle,\r\n          },\r\n          linkProps: {\r\n            children: storedLangProps.backToHomeText,\r\n            to: `/${storedLocale}`,\r\n          },\r\n        };\r\n      }\r\n\r\n      const matchingLangCode = getPreferredLang(browserLangCodes, appLangCodes);\r\n\r\n      const defaultLanguageMatch = matchingLangCode === defaultLanguage;\r\n\r\n      if (!storedLocale && defaultLanguageMatch) {\r\n        storeLocale(defaultLanguage);\r\n        return { ...defaultLangProps };\r\n      }\r\n\r\n      const secondaryLanguages = getSecondaryLangs(appLangCodes);\r\n      const secondaryLanguageMatch = findSecondaryLang(\r\n        secondaryLanguages,\r\n        matchingLangCode\r\n      );\r\n      if (!storedLocale && secondaryLanguageMatch) {\r\n        storeLocale(secondaryLanguageMatch);\r\n        const secondaryLangProps = propNodes.find(\r\n          ({ locale }) => locale === secondaryLanguageMatch\r\n        );\r\n        return {\r\n          headProps: {\r\n            title: secondaryLangProps.seo.seotitle,\r\n            locale: secondaryLanguageMatch,\r\n          },\r\n          heroProps: {\r\n            title: secondaryLangProps.title,\r\n            subtitle: secondaryLangProps.subtitle,\r\n          },\r\n          linkProps: {\r\n            children: secondaryLangProps.backToHomeText,\r\n            to: `/${secondaryLanguageMatch}`,\r\n          },\r\n        };\r\n      }\r\n      return { ...defaultLangProps };\r\n    };\r\n\r\n    const { headProps, heroProps, linkProps } = getProps();\r\n\r\n    return (\r\n      <>\r\n        <NotFoundPageHead {...headProps} />\r\n        <Hero\r\n          {...heroProps}\r\n          fullView\r\n          centered\r\n          button={\r\n            <Link\r\n              {...linkProps}\r\n              className=\"classicButton classicButtonOutline\"\r\n            />\r\n          }\r\n        />\r\n      </>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default NotFoundPage;\r\n"],"names":["HeroWrapper","styled","fullView","HeroContainer","centered","HeroTextBox","Hero","alt","title","subtitle","button","sectionChildren","hasDivider","bottom","NotFoundPageHead","locale","isRtl","isRtlLang","Helmet","lang","dir","rel","href","type","data","useStaticQuery","defaultLanguage","useDefaultLanguage","locales","datoCmsSite","appLangCodes","storedLocale","getStoredLocale","isSSR","browserLangCodes","navigator","languages","propNodes","allDatoCmsNotFoundPage","nodes","defaultLangPropsNode","seoTitle","seo","backToHomeText","defaultLangProps","headProps","heroProps","linkProps","children","to","isDefaultStored","isSecondaryStored","storedLangProps","find","matchingLangCode","getPreferredLang","storeLocale","secondaryLanguages","getSecondaryLangs","secondaryLanguageMatch","findSecondaryLang","secondaryLangProps","seotitle","getProps","className"],"sourceRoot":""}